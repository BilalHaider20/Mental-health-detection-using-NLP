import pandas as pd
import spacy
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
import numpy as np

# Load spaCy model for preprocessing
nlp = spacy.load("en_core_web_sm")

# Preprocessing function: Tokenization, stop-word removal, lemmatization
def preprocess_text(text):
    doc = nlp(text.lower())
    tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]
    return " ".join(tokens)

# Load dataset (placeholder: replace with actual dataset)
# Expected format: DataFrame with 'text' (social media post) and 'label' (1 or 0)
data = pd.DataFrame({
    'text': [
        "I feel so hopeless and sad every day",
        "Having a great time with friends!",
        "Struggling with anxiety and can’t sleep",
        "Just got a new job, super excited",
        "I don’t see the point in living anymore",
        "Loving the sunny weather today"
    ],
    'label': [1, 0, 1, 0, 1, 0]
})

# Apply preprocessing
data['processed_text'] = data['text'].apply(preprocess_text)

# Feature extraction with TF-IDF
vectorizer = TfidfVectorizer(max_features=1000)
X = vectorizer.fit_transform(data['processed_text'])
y = data['label']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-Score: {f1:.2f}")

# Confusion matrix visualization
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Concern', 'Concern'], yticklabels=['No Concern', 'Concern'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.savefig('confusion_matrix.png')

# Error analysis: Print misclassified examples
misclassified = data.iloc[X_test.indices][y_test != y_pred]
print("\nMisclassified Examples:")
for idx, row in misclassified.iterrows():
    print(f"Text: {row['text']}, True Label: {row['label']}, Predicted: {y_pred[X_test.indices.tolist().index(idx)]}")